pr: none

trigger: none

parameters:

# We could map this parameter to a combination of default triplets for Mac and windows, as well as the default feature flags to pass to each
# for example, ffmpeg might map to: ffmpeg[avcodec,avdevice,avfilter,avformat,avresample,postproc,swscale,swresample,mp3lame,sdl2,zlib,dav1d]
- name: packageName
  displayName: Package to install (builds as a dynamic library, unless otherwise specified)
  type: string
  values:
  - buildcache
  - dawn
  - ffmpeg-cloud-gpl
  - ffmpeg-desktop-base
  - ffmpeg-desktop-hevc
  - ffmpeg-wasm-base
  - ffmpeg-wasm-image2video
  - glslang
  - hunspell
  - hunspell-debug
  - kaldi
  - libpng
  - libzip-static
  - libzip-dynamic
  - minizip
  - openblas
  - openssl-static
  - opencv4
  - pango-desktop
  - sqlite3
  - sqlite-modern-cpp
  - tinyxml
  - whispercpp
  - whispercpp-cpuaccel

- name: publishToGitHubRelease
  displayName: "Publish to GitHub Release: If checked, publishes artifacts to a release in the GitHub repo, using the preconfigured package name and version (ex. \"somepackage-1.2.3\")."
  type: boolean
  default: true

- name: appendFeatureString
  displayName: "Append Version String: If specified, appends an additional string to a GitHub release's version tag (ex. If \"somefeature\" is specified , then \"--somefeature\" is appended to the version tag)."
  type: string
  default: ' '

- name: isFinalBuild
  displayName: "Is Final Build: If NOT checked, marks this as a pre-release build in GitHub, and will have \"--prerelease-YYYYMMDD-HHmmss\" appended to the version tag."
  type: boolean
  default: false

stages:
- template: templates/build.yml
  parameters:
    packageName: ${{ parameters.packageName }}
    publishToPipelineArtifacts: true
    publishToGitHubRelease: ${{ parameters.publishToGitHubRelease }}
    appendFeatureString: ${{parameters.appendFeatureString}}
    isFinalBuild: ${{ parameters.isFinalBuild }}
    isPreconfiguredBuild: true
