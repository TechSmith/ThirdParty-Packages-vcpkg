parameters:
- name: packageName
  displayName: The package name to use
  type: string
  default:

- name: package
  displayName: The package name and feature flags to build the package with (ex. ""somepackage" or "somepackage[feature1,feature2]")
  type: string
  default:

- name: linkType
  displayName: Type of linking to use for libs in package (dynamic or static)
  type: string
  default:

- name: buildType
  displayName: Type of build to use for libs in package (release or debug)
  type: string
  default:

- name: publishToPipelineArtifacts
  displayName: Publish built package artifacts to pipeline artifacts
  type: boolean
  default: false

- name: publishToGitHubRelease
  displayName: Publish built package artifacts to a tagged release in the GitHub repo (A package name + version tag will be created like "somepackage-1.2.3")
  type: boolean
  default: false

- name: appendStringToGitHubRelease
  displayName: Append a string to a GitHub release (If "20240401" specified, then "somepackage-1.2.3" would become "somepackage-1.2.3--20240401")
  type: string
  default:

- name: isPreconfiguredBuild
  displayName: isPreconfiguredBuild
  type: boolean
  default: false

- name: isCustomBuild
  displayName: isCustomBuild
  type: boolean
  default: false

stages:
- stage: Build
  displayName: 'Build'
  variables:
  - template: steps/build-vars.yml

  jobs:
  - job: Build
    condition: succeeded()
    strategy:
      matrix:
        windows:
          imageName: ''
          poolName: 'VMSS_CommonCpp_VS2022'
          osName: win
        mac:
          imageName: macOS-14
          poolName: ''
          osName: mac
        linux:
          imageName: ubuntu-latest
          poolName: ''
          osName: linux
      maxParallel: 3

    pool:
      vmImage: $(imageName)
      name: $(poolName)

    steps:
    - template: steps/setup-auth.yml

    - template: steps/full-checkout.yml

    - pwsh: |
        ./build-package.ps1 -PackageName "${{ parameters.packageName }}" -StagedArtifactsPath "$(Build.ArtifactStagingDirectory)/package"
      displayName: 'Run: install & stage (preconfigured)'
      condition: and(succeeded(), ${{ parameters.isPreconfiguredBuild }})

    - pwsh: |
        ./invoke-build.ps1 -PackageAndFeatures "${{ parameters.package }}" -LinkType "${{ parameters.linkType }}" -BuildType "${{ parameters.buildType }}" -StagedArtifactsPath "$(Build.ArtifactStagingDirectory)/package"
      displayName: 'Run: install & stage (custom)'
      condition: and(succeeded(), ${{ parameters.isCustomBuild }})

    - powershell: |
        echo "##vso[task.setvariable variable=binExists]$(if (Test-Path "$(Build.ArtifactStagingDirectory)/package/bin") { 'true' } else { 'false' })"
        echo "##vso[task.setvariable variable=srcExists]$(if (Test-Path "$(Build.ArtifactStagingDirectory)/package/src") { 'true' } else { 'false' })"
      name: CheckDirectories
      displayName: 'Verify builds ran'

    - task: PublishBuildArtifacts@1
      displayName: Publish build artifacts
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)/package/bin
        artifactName: $(osName)-bin
      condition: and(succeeded(), ${{ parameters.publishToPipelineArtifacts }}, eq(variables.binExists, 'true'))

    - task: PublishBuildArtifacts@1
      displayName: Publish build artifacts
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)/package/src
        artifactName: $(osName)-src
      condition: and(succeeded(), ${{ parameters.publishToPipelineArtifacts }}, eq(variables.srcExists, 'true'))

    - pwsh: |
        ./scripts/copy-logs.ps1 -Source "./vcpkg/buildtrees" -Destination "$(Build.ArtifactStagingDirectory)/logs"
      displayName: Stage logs
      condition: and(succeededOrFailed(), ${{ parameters.publishToPipelineArtifacts }}, or(eq(variables.binExists, 'true'), eq(variables.srcExists, 'true')))

    - task: PublishBuildArtifacts@1
      displayName: Publish logs
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)/logs
        artifactName: $(osName)-logs
      condition: and(succeededOrFailed(), ${{ parameters.publishToPipelineArtifacts }}, or(eq(variables.binExists, 'true'), eq(variables.srcExists, 'true')))

- stage: PublishToGitHubRelease
  displayName: 'Publish to GitHub Release'
  dependsOn: Build
  condition: and(succeeded(), ${{ parameters.publishToGitHubRelease }})
  variables:
  - template: steps/build-vars.yml

  jobs:
  - job: PublishToGitHubRelease
    pool:
      vmImage: ubuntu-latest

    steps:
    - checkout: none

    - template: steps/setup-auth.yml

    - task: DownloadPipelineArtifact@2
      displayName: 'Download artifacts from previous stage'
      inputs:
        targetPath: $(Build.SourcesDirectory)/artifacts

    - task: PowerShell@2
      displayName: 'Prepare artifacts for staging'
      inputs:
        pwsh: true
        targetType: 'inline'
        workingDirectory: $(Build.SourcesDirectory)/artifacts
        script: |
          $paths = @( "./mac-bin", "./win-bin", "./mac-src", "./win-src", "./linux-bin", "./linux-src" )
          foreach ($path in $paths) {
              if (Test-Path $path) {
                  Move-Item -Path "$path/*" -Destination . -Force
                  Remove-Item -Path $path -Recurse -Force
              }
          }

    - task: CopyFiles@2
      displayName: 'Stage artifacts'
      inputs:
        Contents: '**'
        SourceFolder: $(Build.SourcesDirectory)/artifacts
        TargetFolder: $(Build.ArtifactStagingDirectory)

    - task: PowerShell@2
      displayName: 'Getting info for GitHub release'
      inputs:
        pwsh: true
        targetType: 'inline'
        workingDirectory: $(Build.SourcesDirectory)/artifacts
        script: |
          $zipFiles = (Get-ChildItem -Filter "*-bin.tar.gz")
          $gitReleaseNotes = "| File | Hash |"
          $gitReleaseNotes += "`n| ---------- | ---------- |"
          foreach ($zipFile in $zipFiles) {
             $hash = (Get-FileHash -Algorithm MD5 -Path $zipFile.FullName).Hash.ToLower()
             $gitReleaseNotes += "`n| $($zipFile.Name) | $hash |"
          }
          function Escape-Data {
            param(
              [string]$data
            )
            $data = $data -replace '%', '%AZP25'
            $data = $data -replace [System.Environment]::NewLine, '%0A'
            $data = $data -replace "`r", '%0D'
            return $data
          }
          $gitReleaseNotes = Escape-Data $gitReleaseNotes
          $packageInfoJsonFile = "package.json"
          $artifactsUnzippedDir = "artifactContents"
          $artifactZip = (Get-ChildItem -Filter "*-bin.tar.gz" | Select-Object -First 1).Name
          New-Item -ItemType Directory -Name "$artifactsUnzippedDir"
          tar -xzvf $artifactZip -C $artifactsUnzippedDir
          Push-Location $artifactsUnzippedDir
          $gitReleaseTagName = ""
          $gitReleaseTagSuffix = "${{ parameters.appendStringToGitHubRelease }}".Trim()
          if (Test-Path -Path $packageInfoJsonFile -PathType Leaf) {
              $jsonContent = Get-Content -Path $packageInfoJsonFile -Raw | ConvertFrom-Json
              $version = $jsonContent.version
              $packageName = $jsonContent.packageName
              $gitReleaseTagName = "$packageName-$version"
          }
          Pop-Location
          if( $gitReleaseTagSuffix -ne "") {
             $gitReleaseTagName += "--$gitReleaseTagSuffix"
          }
          Write-Host "##vso[task.setvariable variable=gitReleaseTagName]$gitReleaseTagName"
          Write-Host "##vso[task.setvariable variable=gitReleaseNotes]$gitReleaseNotes"

    - task: GitHubRelease@1
      displayName: 'Create GitHub release'
      inputs:
        gitHubConnection: 'TechSmithGitHub'
        repositoryName: '$(Build.Repository.Name)'
        target: '$(Build.SourceVersion)'
        action: 'create'
        title: $(gitReleaseTagName)
        tagSource: 'userSpecifiedTag'
        tag: $(gitReleaseTagName)
        releaseNotesSource: 'inline'
        releaseNotesInline: |
          $(gitReleaseNotes)
        addChangeLog: false
        isDraft: false
        isPreRelease: false
        assets: |
          $(Build.ArtifactStagingDirectory)/*
      condition: and(succeeded(), ${{ parameters.publishToGitHubRelease }})
